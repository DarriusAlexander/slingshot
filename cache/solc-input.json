{
  "language": "Solidity",
  "sources": {
    "contracts/Deployer.sol": {
      "content": "pragma solidity >= 0.5.12 < 0.7.0;\r\n\r\nimport './Meeting.sol';\r\n\r\ncontract Deployer{\r\n\r\n\tevent NewMeetingEvent(address ownerAddr, address contractAddr);\r\n\r\n\tMeeting public meeting;\r\n\r\n\tfunction deploy(uint _startDate, uint _endDate, uint _minStake, uint _registrationLimit) external returns(address){\r\n\t\tmeeting = new Meeting(_startDate, _endDate, _minStake, _registrationLimit, address(this), msg.sender);\r\n\t\temit NewMeetingEvent(msg.sender, address(meeting));\r\n\t\treturn address(meeting);\r\n\t}\r\n}"
    },
    "contracts/Meeting.sol": {
      "content": "pragma solidity >= 0.5.12 < 0.7.0;\r\n\r\nimport \"./openzeppelin/Ownable.sol\";\r\nimport \"./openzeppelin/SafeMath.sol\";\r\nimport './DeployerInterface.sol';\r\nimport './MeetingInterface.sol';\r\n\r\ncontract Meeting is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public startDate;\r\n    uint public endDate;\r\n    uint public minStake; //should be entered in GWEI by frontend\r\n    uint public registrationLimit;\r\n    uint public registered;\r\n    uint public prevStake;\r\n    uint public payout;\r\n    uint public attendanceCount;\r\n    bool public isCancelled;\r\n    bool public isEnded;\r\n    bool public isActive; //Event started.\r\n    address parentAddress; //Address of deployer contract.\r\n    address prevMeeting; //Address of the previous meeting contract.\r\n\r\n\r\n    struct Participant{\r\n        uint32 rsvpDate;\r\n        uint stakedAmount;\r\n        bool attended;\r\n    }\r\n\r\n    mapping (address => Participant) addressToParticipant;\r\n\r\n    DeployerInterface public deployer;\r\n    MeetingInterface public meeting;\r\n\r\n    event EventCancelled();\r\n    event GetChange();\r\n    event GuyCancelled(address participant);\r\n    event MarkAttendance(address _participant);\r\n    event WithdrawEvent(address addr, uint payout);\r\n    event RSVPEvent(address addr);\r\n    event StartEvent(address addr);\r\n    event EndEvent(address addr, uint attendance);\r\n    event SetStakeEvent(uint stake);\r\n    event EditStartDateEvent(uint timeStamp);\r\n    event EditEndDateEvent(uint timeStamp);\r\n    event EditMaxLimitEvent(uint max);\r\n    event Refund(address addr, uint refund);\r\n    event NextMeeting(uint _startDate, uint _endDate, uint _minStake, uint _registrationLimit, address _nextMeeting);\r\n    event SetPrevStake(uint prevStake);\r\n    event SendStake(uint _amnt);\r\n\r\n    modifier notActive() {\r\n        require(!isActive, 'Event started');\r\n        _;\r\n    }\r\n    \r\n    modifier notCancelled() {\r\n        require(!isCancelled, 'Event cancelled');\r\n        _;\r\n    }\r\n    \r\n    modifier duringEvent() {\r\n        require(isActive && !isEnded, \"Event not happening\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n       @dev Constructor explanation\r\n       @param _startDate - The date the event starts\r\n       @param _endDate - The date the event is expected to end\r\n       @param _minStake - Minimum each participant is required to stake\r\n       @param _registrationLimit - Max attendees\r\n     */\r\n\r\n    constructor (\r\n        uint _startDate, uint _endDate, uint _minStake, uint _registrationLimit, address _parentAddress, address _prevMeeting) public {\r\n        startDate = _startDate;\r\n        endDate = _endDate;\r\n        minStake = _minStake;\r\n        registrationLimit = _registrationLimit;\r\n        parentAddress = _parentAddress; //For deployment of next event contract.\r\n        prevMeeting = _prevMeeting;\r\n    }\r\n\r\n    /**@dev Start of functions */\r\n\r\n    function rsvp() external payable{\r\n        uint amnt = addressToParticipant[msg.sender].stakedAmount; \r\n        require(amnt < minStake, 'Already registered');\r\n        require(msg.value.add(amnt) == minStake, 'Incorrect stake');\r\n        require(registered < registrationLimit, 'Limit reached');\r\n        addressToParticipant[msg.sender] = Participant(uint32(now), msg.value, false);\r\n        registered++;\r\n        /*Can store return value of the above function into `RegistrationId` which can be used to uniquely\r\n        identify & distribute QR code (still figuring out if needed and how)*/\r\n        emit RSVPEvent(msg.sender);\r\n    }\r\n\r\n    function getChange() external{\r\n        uint amnt = addressToParticipant[msg.sender].stakedAmount;\r\n        require(amnt > 0);\r\n        msg.sender.transfer(amnt.sub(minStake)); //Give change if user has overpaid. This can be done before or after the event.\r\n    \r\n        emit GetChange();\r\n    }\r\n\r\n    function eventCancel() external notActive onlyOwner notCancelled{\r\n        //If it is the owner who calls this, it will cancel the event\r\n        isCancelled = true;\r\n        minStake = 0; //This allows refunds to be claimed through getChange()\r\n        if (address(meeting) != address(0)){ //Send stake to new event if it has been created.\r\n            sendStake(prevStake);\r\n        }\r\n        emit EventCancelled();\r\n    }\r\n    \r\n    function guyCancel() external notActive notCancelled {\r\n        //Participant cancel RSVP\r\n        Participant memory participant = addressToParticipant[msg.sender];\r\n        require (participant.stakedAmount != 0, 'Guy cancelled'); \r\n\r\n        //Check if RSVP'd within 24 hours\r\n        require(participant.rsvpDate + 1 days > now, \"1 day notice\");\r\n        msg.sender.transfer(participant.stakedAmount);\r\n        addressToParticipant[msg.sender].stakedAmount = 0;\r\n        registered--;\r\n        emit GuyCancelled(msg.sender);\r\n    }\r\n\r\n    /**@dev Organizer's management functions */\r\n    function markAttendance(address _participant) external onlyOwner duringEvent{\r\n        //will pass in a list as parameter and use attendanceCount = list.length;\r\n        Participant memory participant = addressToParticipant[_participant];\r\n        require(participant.attended == false, 'already marked');\r\n        require(participant.stakedAmount >= minStake, 'Stake too low');\r\n        addressToParticipant[_participant].attended = true;\r\n        attendanceCount++;\r\n        emit MarkAttendance(_participant);\r\n    }\r\n\r\n    function startEvent() external onlyOwner notActive notCancelled{\r\n        require(startDate < now && now < endDate, \"Can't start out of scope\");\r\n        //Not sure we need but means organiser cannot start event at arbitrary times.\r\n        isActive = true;\r\n        emit StartEvent(msg.sender); //Maybe not necessary to msg.sender\r\n    }\r\n\r\n    function endEvent() external onlyOwner duringEvent{\r\n        isEnded = true;\r\n        payout = prevStake.div(attendanceCount);\r\n        if (address(meeting) != address(0)){\r\n            sendStake(address(this).balance.sub(prevStake));\r\n        } \r\n        emit EndEvent(msg.sender, attendanceCount); //Maybe not necessary to msg.sender\r\n    }\r\n\r\n    /**@dev Organizer's `edit event` functions */\r\n    function setStartDate(uint dateTimestamp) external onlyOwner notActive{\r\n        //Check if new date is not within 24 hours of today or less\r\n        require(dateTimestamp > now.add(24 hours), 'Within 24 hours of event');\r\n        startDate = dateTimestamp;\r\n        emit EditStartDateEvent(dateTimestamp);\r\n    }\r\n\r\n    function setEndDate(uint dateTimestamp) external onlyOwner notActive{\r\n        //Check if new date is not within 24 hours of today or less && not before start date\r\n        require(dateTimestamp > now.add(24 hours), 'Within 24 hours of event');\r\n        require(dateTimestamp > startDate, 'End must be after start');\r\n        endDate = dateTimestamp;\r\n        emit EditEndDateEvent(dateTimestamp);\r\n    }\r\n\r\n    function setMinStake(uint stakeAmt) external onlyOwner notActive{\r\n        require(startDate > now.add(24 hours), 'Within 24 hours of event');\r\n        if (minStake < stakeAmt){\r\n            registered = 0; //All participants need to increase stake.\r\n            } \r\n        minStake = stakeAmt;\r\n        emit SetStakeEvent(stakeAmt);\r\n    }\r\n\r\n    function setRegistrationLimit(uint max) external onlyOwner notActive{\r\n        require(max >= registered, \"Cant set less than registered\");\r\n        //Ben: no reason for admin to not be able to lower limit if less than registered I think.\r\n        registrationLimit = max;\r\n        emit EditMaxLimitEvent(max);\r\n    }\r\n\r\n    /**@dev Smart Contract's functions */\r\n    function withdraw() external {\r\n        //Either manually withdraw or automatic send back\r\n        require(addressToParticipant[msg.sender].attended, \"Did not attend\");\r\n        require(payout != 0, 'no payout');\r\n        msg.sender.transfer(payout);\r\n        addressToParticipant[msg.sender].attended = false;\r\n        emit WithdrawEvent(msg.sender, payout);\r\n    }\r\n\r\n    /**@dev Deploys next event contract.*/\r\n    function nextMeeting(uint _startDate, uint _endDate, uint _minStake, uint _registrationLimit) external onlyOwner returns(address) { //Or internal\r\n        //Cooldown period not necessary since we want owner to, at any time, be able to create chains of events.\r\n        require(address(meeting) == address(0), 'Only be called once');\r\n        deployer = DeployerInterface(parentAddress); //Define deployer contract.\r\n        meeting = MeetingInterface(deployer.deploy(_startDate, _endDate, _minStake, _registrationLimit)); //Deploy next event contract\r\n        if (isEnded){\r\n            sendStake(address(this).balance.sub(prevStake));\r\n        }\r\n        if (isCancelled){\r\n            sendStake(prevStake);\r\n        }\r\n        emit NextMeeting (_startDate, _endDate, _minStake, _registrationLimit, address(meeting));\r\n        return address(meeting);\r\n    }\r\n\r\n    //@dev This function is called by the previous contract to set the stake amount.\r\n    function setPrevStake(uint _prevStake) external payable {\r\n        require(msg.sender == prevMeeting, 'Sender != prevMeeting');\r\n        prevStake = _prevStake;\r\n        emit SetPrevStake(prevStake);\r\n    }\r\n\r\n    function sendStake(uint _amnt) internal {\r\n        if (_amnt != 0){ //Send current balance minus prevStake to new contract.\r\n            meeting.setPrevStake(_amnt);\r\n        }\r\n        \r\n        emit SendStake(_amnt);\r\n    }\r\n\r\n    function destroyAndSend(address payable _recipient) onlyOwner public {\r\n        selfdestruct(_recipient);\r\n    }\r\n\r\n    //Temp function for testing\r\n    function getBalance() external view returns (uint){\r\n        return address(this).balance;\r\n    }\r\n}"
    },
    "contracts/openzeppelin/Ownable.sol": {
      "content": "pragma solidity >= 0.5.0 < 0.7.0;\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address txOrigin = tx.origin;\r\n        _owner = txOrigin;\r\n        emit OwnershipTransferred(address(0), txOrigin);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "contracts/openzeppelin/SafeMath.sol": {
      "content": "pragma solidity >= 0.5.0 < 0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/DeployerInterface.sol": {
      "content": "pragma solidity >= 0.5.12 < 0.7.0;\r\n\r\ninterface DeployerInterface {\r\n\t//Deployer\r\n\tfunction deploy(uint _startDate, uint _endDate, uint _minStake, uint _registrationLimit) external returns(address payable);\r\n}"
    },
    "contracts/MeetingInterface.sol": {
      "content": "pragma solidity >= 0.5.12 < 0.7.0;\r\n\r\ninterface MeetingInterface {\r\n\t//Ownable\r\n\tfunction renounceOwnership() external;\r\n\tfunction transferOwnership(address newOwner) external;\r\n\r\n\t//Meeting\r\n\tfunction rsvp() external payable;\r\n\tfunction cancel() external;\r\n\tfunction markAttendance(address _participant) external;\r\n\tfunction startEvent() external;\r\n\tfunction endEvent() external;\r\n\tfunction setStartDate(uint dateTimestamp) external;\r\n\tfunction setEndDate(uint dateTimestamp) external;\r\n\tfunction setMinStake(uint stakeAmt) external;\r\n\tfunction setRegistrationLimit(uint max) external;\r\n\tfunction withdraw() external;\r\n\tfunction nextMeeting(uint _startDate, uint _endDate, uint _minStake, uint _registrationLimit) external returns(address);\r\n\tfunction getBalance() external view returns (uint);\r\n    function setPrevStake(uint _prevStake) external payable;\r\n}"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}